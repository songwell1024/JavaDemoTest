package ForkJoinTest;
import java.util.concurrent.*;
import java.util.function.*;

public class forkJoin {
	public static void main(String[] args) {
		final int SIZE = 1000000;
		double[] numbers = new double[SIZE];
		for(int i = 0; i < SIZE; i++) {
			numbers[i] = Math.random();
		}
		
	}

}

class Counter extends RecursiveTask<Integer>{
	public static final int THRESHOLD = 100;
	private double[] values;
	private int from;
	private int to;
	private DoublePredicate filter;
	
	public Counter(double[] values, int from, int to, DoublePredicate filter) {
		this.values = values;
		this.from = from;
		this.to = to;
		this.filter = filter;
	}
	
	protected Integer compute() {
		if(to - from < THRESHOLD) {
			int count = 0;
			for(int i = from; i <to; i++) {
				if(filter.test(values[i]))
					count++;
			}
			return count;
		}
		else {
			int mid = (from + to)/2;
			Counter first = new Counter(values, from, mid, filter);
			Counter second = new Counter(values, mid+1, to, filter);
			invokeAll(first, second);
			return first.join() + second.join();
			
		}
	}
}
