package synch;

import java.util.*;

public class Bank {
	private final double[] accounts;
	public static final int NAccount = 100;
	public static final double InitialBablance = 1000;
	public static final double MaxAccount = 1000;
	public static final int Delay = 10;
	public static void main(String[] args) {
		Bank b = new Bank(NAccount, InitialBablance);
		for(int i = 0; i < NAccount; i++) {
			int fromAcconut = i;
			Runnable r = () -> {
				try {
					int toAccount = (int) (b.size() * Math.random());
					double amount = MaxAccount * Math.random(); 
					b.transfer(fromAcconut, toAccount, amount);
					Thread.sleep((int) (Delay * Math.random()));
				}catch(InterruptedException IE){
				}
			};
			Thread t = new Thread(r);
			t.start();
		}
	}
	public Bank(int n, double initialBalance) {
		accounts = new double[n];
		Arrays.fill(accounts, initialBalance);
	}
	
	public synchronized void transfer(int from, int to, double amount) throws InterruptedException{
		while(accounts[from] < amount) {
			wait();
		}
		System.out.println(Thread.currentThread());
		accounts[from] -= amount;
		System.out.printf(" %10.2f from %d to %d",amount, from, to);
		accounts[to] += amount;
		System.out.printf("Total balance: %10.2f%n", getTotalBalance());
		notifyAll();
	}
	
	public synchronized double getTotalBalance() {
		double sum = 0;
		for(double a : accounts) {
			sum += a;
		}
		return sum;
	}
	
	public int size() {
		return accounts.length;
	}
}
